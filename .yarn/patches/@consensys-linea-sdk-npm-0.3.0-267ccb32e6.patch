diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
index 0000000000000000000000000000000000000000..b58b603fea78041071d125a30db58d79b3d49217
--- /dev/null
+++ b/.idea/.gitignore
@@ -0,0 +1,5 @@
+# Default ignored files
+/shelf/
+/workspace.xml
+# Editor-based HTTP Client requests
+/httpRequests/
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
index 0000000000000000000000000000000000000000..03d9549ea8e4ada36fb3ecbc30fef08175b7d728
--- /dev/null
+++ b/.idea/inspectionProfiles/Project_Default.xml
@@ -0,0 +1,6 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="Eslint" enabled="true" level="WARNING" enabled_by_default="true" />
+  </profile>
+</component>
\ No newline at end of file
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
index 0000000000000000000000000000000000000000..d9fb14e4d06a030cba3cd105982c4f196e0718a0
--- /dev/null
+++ b/.idea/modules.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/user.iml" filepath="$PROJECT_DIR$/.idea/user.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
diff --git a/.idea/user.iml b/.idea/user.iml
new file mode 100644
index 0000000000000000000000000000000000000000..24643cc37449b4bde54411a80b8ed61258225e34
--- /dev/null
+++ b/.idea/user.iml
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="WEB_MODULE" version="4">
+  <component name="NewModuleRootManager">
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.tmp" />
+      <excludeFolder url="file://$MODULE_DIR$/temp" />
+      <excludeFolder url="file://$MODULE_DIR$/tmp" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+  </component>
+</module>
\ No newline at end of file
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
new file mode 100644
index 0000000000000000000000000000000000000000..7f9ce9fa4448faebe270ff11ac872bc5cc94f4a1
--- /dev/null
+++ b/.idea/workspace.xml
@@ -0,0 +1,51 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ChangeListManager">
+    <list default="true" id="23272bf3-4e84-4cae-843b-d10b60412f74" name="Changes" comment="" />
+    <option name="SHOW_DIALOG" value="false" />
+    <option name="HIGHLIGHT_CONFLICTS" value="true" />
+    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
+    <option name="LAST_RESOLUTION" value="IGNORE" />
+  </component>
+  <component name="ProjectColorInfo"><![CDATA[{
+  "associatedIndex": 5
+}]]></component>
+  <component name="ProjectId" id="2tLUgcRN0DjzNZp78XstgSpjXNu" />
+  <component name="ProjectViewState">
+    <option name="hideEmptyMiddlePackages" value="true" />
+    <option name="showLibraryContents" value="true" />
+  </component>
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "last_opened_file_path": "/private/var/folders/0h/pnj87fv1461bv0ms_kzz6rs40000gn/T/xfs-5c11ffd3/user",
+    "node.js.detected.package.eslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "ts.external.directory.path": "/Users/pajicf/Applications/WebStorm.app/Contents/plugins/javascript-plugin/jsLanguageServicesImpl/external",
+    "vue.rearranger.settings.migration": "true"
+  }
+}]]></component>
+  <component name="SharedIndexes">
+    <attachedChunks>
+      <set>
+        <option value="bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-WS-241.19416.2" />
+      </set>
+    </attachedChunks>
+  </component>
+  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
+  <component name="TaskManager">
+    <task active="true" id="Default" summary="Default task">
+      <changelist id="23272bf3-4e84-4cae-843b-d10b60412f74" name="Changes" comment="" />
+      <created>1740130960240</created>
+      <option name="number" value="Default" />
+      <option name="presentableId" value="Default" />
+      <updated>1740130960240</updated>
+      <workItem from="1740130961299" duration="252000" />
+    </task>
+    <servers />
+  </component>
+  <component name="TypeScriptGeneratedFilesManager">
+    <option name="version" value="3" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/dist/lib/sdk/LineaSDK.js b/dist/lib/sdk/LineaSDK.js
index 24050c97dfc5751c7261908bc2f35c9f16557282..9ff570df09437a6af706cdf14ad4db173777e36a 100644
--- a/dist/lib/sdk/LineaSDK.js
+++ b/dist/lib/sdk/LineaSDK.js
@@ -21,8 +21,8 @@ class LineaSDK {
             this.maxFeePerGas = options.feeEstimatorOptions?.maxFeePerGas;
             this.gasFeeEstimationPercentile = options.feeEstimatorOptions?.gasFeeEstimationPercentile;
         }
-        this.l1Provider = new ProviderService_1.default(options.l1RpcUrl);
-        this.l2Provider = new ProviderService_1.default(options.l2RpcUrl);
+        this.l1Provider = new ProviderService_1.default(options.l1RpcUrl, options.l1Rpc);
+        this.l2Provider = new ProviderService_1.default(options.l2RpcUrl, options.l2Rpc);
     }
     getL1Contract(localL1ContractAddress, localL2ContractAddress) {
         let l1ContractAddress;
diff --git a/dist/lib/sdk/ProviderService.d.ts b/dist/lib/sdk/ProviderService.d.ts
index d4acc1c6f13034b946850571e152e9400cd32b25..57cf9d8a09f772c97ae3d473113066a6c77a8f8d 100644
--- a/dist/lib/sdk/ProviderService.d.ts
+++ b/dist/lib/sdk/ProviderService.d.ts
@@ -1,6 +1,6 @@
 import { ethers, JsonRpcProvider } from "ethers";
 export default class ProviderService {
     provider: JsonRpcProvider;
-    constructor(rpcUrl: string);
+    constructor(rpcUrl: string, jsonRpcProvider?: JsonRpcProvider);
     getSigner(privateKey: string): ethers.Signer;
 }
diff --git a/dist/lib/sdk/ProviderService.js b/dist/lib/sdk/ProviderService.js
index d534b5595aa8b17b7542b64baae9dbce143cef14..e11d7a20911664c1bdb05301773eb1ef9ebf5aa8 100644
--- a/dist/lib/sdk/ProviderService.js
+++ b/dist/lib/sdk/ProviderService.js
@@ -2,8 +2,8 @@
 Object.defineProperty(exports, "__esModule", { value: true });
 const ethers_1 = require("ethers");
 class ProviderService {
-    constructor(rpcUrl) {
-        this.provider = new ethers_1.JsonRpcProvider(rpcUrl);
+    constructor(rpcUrl, jsonRpcProvider) {
+        this.provider = jsonRpcProvider ? jsonRpcProvider : new ethers_1.JsonRpcProvider(rpcUrl);
     }
     getSigner(privateKey) {
         try {
diff --git a/dist/lib/sdk/claiming/L1ClaimingService.js b/dist/lib/sdk/claiming/L1ClaimingService.js
index 4c8d672b6eec2acb9ca9dd6af04ac3312e497043..93e258977ea8d2f43ff70462e66cd6f0c4a3fcc6 100644
--- a/dist/lib/sdk/claiming/L1ClaimingService.js
+++ b/dist/lib/sdk/claiming/L1ClaimingService.js
@@ -44,6 +44,8 @@ class L1ClaimingService {
         return this.l1Contract.getMessageProof(messageHash);
     }
     async isClaimingNeedingProof(messageHash) {
+        return true; // Status Network uses the latest claiming system from the start
+
         const migrationBlock = await this.findMigrationBlock();
         if (!migrationBlock) {
             return false;
diff --git a/dist/lib/utils/types.d.ts b/dist/lib/utils/types.d.ts
index 522bd36c36ec6af5fdfae9baafa20f911567fabe..c9174cc86f2fcbedd2460e8e2e8a4f8cd3f01b24 100644
--- a/dist/lib/utils/types.d.ts
+++ b/dist/lib/utils/types.d.ts
@@ -1,4 +1,5 @@
 import { TypedEventLog } from "../../typechain/common";
+import { JsonRpcProvider } from "ethers";
 export type Message = {
     messageSender: string;
     destination: string;
@@ -19,6 +20,8 @@ interface BaseOptions {
     readonly network: Network;
     readonly l1RpcUrl: string;
     readonly l2RpcUrl: string;
+    readonly l1Rpc?: JsonRpcProvider;
+    readonly l2Rpc?: JsonRpcProvider;
     readonly mode: SDKMode;
     readonly l2MessageTreeDepth?: number;
 }
